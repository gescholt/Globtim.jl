name: Create Release

on:
  push:
    branches:
      - github-release
    paths:
      - 'Project.toml'

jobs:
  create-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4

      - name: Extract version from Project.toml
        id: get_version
        run: |
          VERSION=$(grep '^version' Project.toml | cut -d '"' -f 2)
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "Detected version: $VERSION"

      - name: Check if tag exists
        id: check_tag
        run: |
          if git ls-remote --tags origin | grep -q "refs/tags/v${{ steps.get_version.outputs.VERSION }}"; then
            echo "TAG_EXISTS=true" >> $GITHUB_OUTPUT
          else
            echo "TAG_EXISTS=false" >> $GITHUB_OUTPUT
          fi

      - name: Get previous tag
        if: steps.check_tag.outputs.TAG_EXISTS == 'false'
        id: get_previous_tag
        run: |
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          echo "PREVIOUS_TAG=$PREVIOUS_TAG" >> $GITHUB_OUTPUT

      - name: Generate release notes
        if: steps.check_tag.outputs.TAG_EXISTS == 'false'
        id: release_notes
        run: |
          VERSION="${{ steps.get_version.outputs.VERSION }}"
          PREVIOUS_TAG="${{ steps.get_previous_tag.outputs.PREVIOUS_TAG }}"

          if [ -z "$PREVIOUS_TAG" ]; then
            echo "BODY=Initial release of Globtim.jl v$VERSION" >> $GITHUB_OUTPUT
          else
            # Get commit messages since last tag
            COMMITS=$(git log $PREVIOUS_TAG..HEAD --pretty=format:"- %s" | grep -v "Merge" | head -10)

            cat > release_body.md << EOF
          ## Globtim.jl v$VERSION

          ### What's Changed
          $COMMITS

          ### Installation
          \`\`\`julia
          pkg> add Globtim
          \`\`\`

          **Full Changelog**: https://github.com/${{ github.repository }}/compare/$PREVIOUS_TAG...v$VERSION
          EOF

            # Escape newlines for GitHub Actions
            BODY=$(cat release_body.md | sed ':a;N;$!ba;s/\n/\\n/g')
            echo "BODY=$BODY" >> $GITHUB_OUTPUT
          fi

      - name: Create Release
        if: steps.check_tag.outputs.TAG_EXISTS == 'false'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.get_version.outputs.VERSION }}
          release_name: v${{ steps.get_version.outputs.VERSION }}
          body: ${{ steps.release_notes.outputs.BODY }}
          draft: false
          prerelease: false

      - name: Trigger Julia Registry
        if: steps.check_tag.outputs.TAG_EXISTS == 'false'
        run: |
          echo "New release created. TagBot will handle Julia registry submission."
